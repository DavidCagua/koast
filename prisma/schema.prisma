// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

// Campaign metrics from Meta Ads API
model Campaign {
    id          String   @id @default(cuid())
    campaignId  String   @unique // Meta Ads campaign ID
    name        String
    spend       Float
    ctr         Float
    roas        Float
    impressions Int
    syncedAt    DateTime @default(now())
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt

    // Relations
    actionLogs  ActionLog[]
}

// Automation rules
model AutomationRule {
    id          String   @id @default(cuid())
    name        String
    description String?
    isActive    Boolean  @default(true)

    // Rule conditions
    metric      String   // "spend", "ctr", "roas", "impressions"
    operator    String   // "gt", "lt", "eq", "gte", "lte"
    threshold   Float

    // Rule actions
    action      String   // "pause_campaign", "increase_budget", "decrease_budget", "send_notification"
    actionValue String?  // Additional data for the action

    // Tracking
    lastTriggered DateTime?
    triggerCount  Int      @default(0)

    // Relations
    createdBy   User   @relation(fields: [createdById], references: [id])
    createdById String
    actionLogs  ActionLog[]

    // Timestamps
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt

    @@index([isActive])
    @@index([metric])
}

// Action logs when rules are triggered
model ActionLog {
    id        String   @id @default(cuid())
    ruleId    String
    rule      AutomationRule @relation(fields: [ruleId], references: [id])

    // Action details
    action    String
    actionValue String?
    status    String   @default("pending") // "pending", "success", "failed"

    // Context when triggered
    campaignId String
    campaign   Campaign @relation(fields: [campaignId], references: [id])

    // Metrics at trigger time
    spend       Float
    ctr         Float
    roas        Float
    impressions Int

    // Timestamps
    triggeredAt DateTime @default(now())
    completedAt DateTime?

    @@index([ruleId])
    @@index([status])
    @@index([triggeredAt])
}

// Existing models for NextAuth.js
model Post {
    id        Int      @id @default(autoincrement())
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    createdBy   User   @relation(fields: [createdById], references: [id])
    createdById String

    @@index([name])
}

model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    posts         Post[]
    automationRules AutomationRule[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
